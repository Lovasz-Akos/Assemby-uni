Akkumlátor regiszterek
    AX [16] (AH, AL) [8, 8]     //két felé osztjuk az A 16 bitjét, 8-8 bitre, 
                                  és elnevezzük AH-nak és AL-nek, ezek közösen az AX-et adják ki
    BX [16] (BH, BL) [8, 8]
    CX [16] (CH, CL) [8, 8]
    DX [16] (DH, DL) [8, 8]

    Flag [16] //az akkumlátor-ban elvégzett műveletekhez kapcsolódó értéket vesz fel 
                (kivéve amelyk nem, mert azért ez nem eszik meg 16 bitet)

Index regiszterek
    SI [16] - Source
    DI [16] - Destination


Szegmens regiszterek
    CS [16] - Code
    DS [16] - Data
    SS [16] - Stack
    ES [16] - Extra


Pointerek
    IP [16] - Instruction
    SP [16] - Stack
    BP [16] - Base


-----------------------------------------------------------------------------------------------


Memória párossával van 16 biten, és csak páros címet szeretünk, a páratlan az jön mellé.
(ha nem ,akkor pl az 5höz a 2 jár)
[páratlan][páros]
    
    [1][0]
    [3][2]
    [5][4]

Adatmozgató utasítások
    MOV : cél, forrás - mozgatás a forrásból a célba.
    XCHG : cél, forrás - Csere, a cél és a forrás között
    PUSH/POP  - Stack operátorok (ha warning ot ad mert fasz, push word ptr [cím] mert nem 16 bitet akar)
    PUSHF/POPF - push és pop ami a flag értékét teszi és veszi a stackbe/ből
    IN - I/O területről beírunk processzorra
    OUT - I/0 területre kiírunk
 

    MOV pl:    

        MOV BX, AX
        MOV DL, AH      
        
        MOV AL, 5 (teszek az AL-be konstans értéket (8bit))
       
        MOV AX, 35-3+(8*2) (lehet kifejezés is, ha a fordító futáskor ki tudja számolni)
       
        MOV CX, 3B6FH       <- a H-val jelzem hogy hexadecimális (B-vel h bináris (MOV AX, 00110000B)) értéket teszek be:
                               CH-ba teszi a 3B-t, CL-be teszi a 6F-et (MOV CH, 3BH; MOV CL, 6FH)

            Direkt címzés
                MOV AL, [1234]      <- memória címet is adhatok
                MOV [55H], CL       <- memóriából regiszterbe, és regiszterből memóriába is lehet

            Indirekt címzés
                MOV AL, [BX]
                MOV [SI], DH        <- itt az SI az offset DS címzéshez, ezt bele a DH-ba
                MOV AX, [DI]        <- 2 byte (16 bit) kerül az AX-be, processzor függő hogy milyen sorrendben érkeznek a byte-ok

            Indexelt címzés
                MOV SI, [DI + 12]   <- a DI címben lévő cím + 12 eredmény címen lévő tartalmat tesszük (+1 mert 16bit) az SI-be
            
            Indirekt Indexelt Címzés
                MOV [SI + BX], BL

                MOV AL, ES:[BX]     <- megadhatom, hogy mit használjon offset ként, itt ES. Ha nem adok akkor mindig a DS-t használja
                MOV SI, [BP]
                MOV DS:[BP], CX

            DS-be konstans értéket nem írhatunk
                !MOV DS, 1234!

                MOV AX, 1234
                MOV DS, AX          <- így lehet


    PUSH/POP pl:

        PUSH BX
        PUSH CX             <- de ha utánna POP BX, POP CX, akkor fordítva írja vissza, sőt mehetnek a flagbe is

    IN/OUT pl:

        IN AL, direkt cím (0 - FFH)
        IN AX, [DX]

        OUT direkt cím (0 - FFH), AL
        OUT [DX], AX



Memóriából memóriába direkt módon nem mozgathatok értékeket (csak úgy mint DS-be, 2 lépésben)
// az egycímes processzorok esetén //

   


A {MOV [BX], 5} (ha a BX 2), akkor most BL-be teszed, mert a BX 2-re mutat, és 8 bitre írod, 
                             vagy 3,2-re és a 3-at kitöltöd 0-val 16 biten? -Hát a fordító eldönti és warning xd

Megoldás: MOV BYTE PTR [BX], 5  <- megmondja a mov-nak, hogy ez csak 8bitre kell betenni

Ha a stackből kéne valami (nem a tetejéről) akkor     
                                    
    MOV BP, SP
    MOV AX, [BP+16]
    MOV [BP+10], CX (ahol a 10 egyértelműen annyi amennyi épp kéne, duh)


I/O eszközök maximum 3FF címen lehettek, 16 bitből a felső 6ot mindig 0-nak tekintik

Aritmetikai utasítások
    ADD : cél, forrás - összeadás, a cél-ban tárolja el az eredményt.
    ADC : cél, forrás - összeadás, a carry bit-el együtt, a cél-ban tárolja el az eredményt.
    SUB : cél, forrás - kivonás, a cél-ban tárolja el az eredményt.
    SBB : cél, forrás - kivonás, a carry bit-el együtt, a cél-ban tárolja el az eredményt.
    INC : cél - inkrementálja az adott elemet (+1)
    DEC : cél - dekrementálja az adott elemet (-1)
    NEG : cél - előjelváltás / kicseréli a kettes komplemensével
    MUL : cél, forrás - a cél csak 8 vagy 16 bites érték lehet, sosem konstans. ha 8 bites akkor az AL-el szorozza, ha 16bites akkor az AX-el 
                                                                 (mármint hogy az egész AX ha 16 vagy fele AX, azaz AL-el 8-nál)

                        Ha 8bites értéket szorzok, az AX fogja tárolni, mert biztosan 16 bites lesz az eredmény, az AL meg ugye elveszik.
                        Ha 16 bites értéket szorzok, akkor a szorzat felső része a DX-be kerül, az alsó rész meg az AX-be.

    IMUL: cél, forrás - egyezik a MUL-al, de előjeles értékek szorzására alkalmas
    DIV : cél, forrás - osztás, legrosszabb esetben a 16 bites osztás marad 16 bites. A hányados az AL-be, a maradék az AH-ba kerül; 
                                                    a 32 bites osztás marad 32 bites. A hányados az AX-be, a maradék az DX-be kerül

    IDIV: cél, forrás - előjeles osztás, legrosszabb esetben 
    CMP : érték1, érték2 - összehasonlítás, igazából elvégez egy kivonást, de az eredényt nem írja le,
                                             viszont a flag regiszter-ben a zero ha 0, akkor egyenlő.


    ADD pl:
        ADD AX, 7 <- AX-ban tárolt értéket megnöveli 7-el
        ADD [BX], AL <- ha cím van a célban, akkor is megy egy kis processzor oldali tánccal
    
    ADC pl:
        ADC AL, BH <- simán összeadás, ha a carry bit 0, de ha 1, akkor +1et is hozzáteszi

    SUB pl:
        SUB AL, [SI] <- alap kivonás

    SBB pl: 
        SBB BH, DL <- kivonja a BH-ból a DL-t és még a carry bitet is.
    
    INC pl:
        INC AX <- AX + 1

    DEC pl:
        DEC WORD PTR [BP] <- 16 bites jelzővel ellátott BP memeóriacímet eggyel csökkenti

    NEG pl:
        NEG SI <- SI-t kicseréli saját kettes komplemensével (SI * -1)

    CMP pl:
        CMP AL, 'i' <- nem kell hexázni betűkkel, bebaszod úgy mint más nyelvnél is és tudja magától a fordító

Logikai utasítások
    AND : cél, forrás - ÉS operátor, a cél-ban tárolja el az eredményt.
    OR  : cél, forrás - VAGY operátor, a cél-ban tárolja az eredményt.
    XOR : cél, forrás - Exkluzív VAGY, a cél-ban tárolja az eredményt.
    TEST: cél, forrás - ÉS műveletet végzi el, de nem tárolja az eredményt, hanem a flag regiszterben jelzi.
    NOT : cél         - Bitenkénti negálás, eredményt a célban tárolja.

    AND pl:
        AND AL, 00001111B <- Pl az AL-ben 01100011 van, és elvégezzük a műveletet, az AL-ben 00000011 lesz.

    OR pl:
        OR AL, 00001111B <- Pl az AL-ben 01100011 van, és elvégezzük a műveletet, az AL-ben 01101111 lesz.

    XOR pl:
        XOR AL, 00001111B <- Pl az AL-ben 01100011 van, és elvégezzük a műveletet, az AL-ben 011001100 lesz.

    TEST pl:
        TEST BH, 0FH <- Össze éseli a BH-t és a 0F hexát, majd az eredményt a flag regiszter jelzi.

    NOT pl:
        NOT AL <- Ah az AL = 00001111, az eredmény 11110000, amit az AL-ben tárol.

(CS)IP-t módosító utasítások
    JMP : cél - A cél-ra ugrik az IP, onnan fogja a következő utasítást olvasni. A cél nem egy konstans érték, hanem egy szimbólum.
    CALL: cél - Szubrutin hívás, az elvégzett utasítások után kell egy RET (return) utasítás, hogy visszatérjünk. (Ha far rutin akkor RETF CS:IP)
    INT : cél - Interrupt, megszakítás.
    IRET: cél - Kiveszi a IP-t CRS-t és a flaget a stackből és visszatér a hívási pontjához. (van ahol RETI-nek nevezik)
    INT3: cél - 1 byte-os INT. Good for debug.
    INTO: cél - Akkor jön létre a megszkítás, ha az overflow flag jelez.

    JMP pl:
        JMP tovabb <- a tovabb-hoz ugrik a program (tovabb: kódkódkód).

    CALL pl:
        CALL tovabb <- a tovabb metódushoz ugrik, majd a RET-el visszalép oda ahonnan hívta.

    INT pl:
        INT 20H <- mentésre kerül a FLAG, CS, IP a STACK-ben, az I és T FLAG elemek nullázódnak, majd egy új CS:IP-t hoz be. (Ebben az esetben a 20 hexát)

Feltételesen IP-t módosító utasítások
    J   : [feltétel], utasítás - Igazából IF (Jump if). 

          Lehet C (carry), NC (not carry), Z (equal), NZ (not equal), 
          PO (páratlan, Parity Odd), PE (páros, Parity Even), S (Signed), NS (Not Signed), O (Overflow), NO (Not Overflow)
          
          Előjel nélüli => A (Above, >), AE (Above Equal, >=), B (Below, <), BE (Below Equal, <=).
          Előjeles      => G (Greater), GE (Greater Equal), L (Less), LE (Less Equal)

    LOOP: [] - CX-be betesz CX - 1-et és JCXNZ (Jump if CX not zero)

    LOOP pl:
        MOV CX, 5           CX-ben 5-el kezdünk, azaz a LOOP 5x fut le.

        Vissza:
            kód
            kód
            kód
            LOOP Vissza     CX minden loopban csökken, akkor folyik tovább a program, ha a CX 0-t vesz fel. (DEC CX, JNZ Vissza)    
            kód             JCXZ kikerülheti a loopot ha a CX 0.
            kód
            kód

    JZ limitáció kikerülése csalással:
        JZ Zoli => JNZ Csak
                   JMP Zoli
        Csak: (közeli)
        Zoli: (Távoli, a JZ nem tud eddig ugrani, csak a JMP)

Kis program példa:

    MOV CX, 5           Végtelen ciklus, mert a Masod loop végén 0 lesz a CX és a DEC FFFFFF-re teszi.

    Elso:
        ---
        ---
        MOV CX, 13
    
    Masod:
        ---
        ---
        LOOP Masod
        ---
        ---
        LOOP Elso

Helyesen:

    MOV CX, 5

    Elso:
        ---
        ---
        PUSH CX
        MOV CX, 13
    
    Masod:
        ---
        ---
        LOOP Masod
        POP CX
        ---
        LOOP Elso


Léptető utasítások
    SHL : cél, 1 - Shift Left. Az 1 az egy kötelező operandus, ez a 8080-nál csak 1 lehet, máshol már lehet több
                   Minden bitet balra tol, majd a legalacsonyabb bit 0 lesz. Igazából 2-vel szorzás. A felső bit a carry-be kerül
    SHR : cél, 1 - Shift Right. -||- a felső bit lesz 0, 2-vel osztás. A maradék a carry-be kerül
    SAR : cél, 1 - Shift Arithmetic Right. A felső bit ugyanaz marad, hogy az előjel megmaradjon.
    SAL : cél, 1 - Shift Arithmetic Left. Abszolút SHL.

Forgató utasítások
    ROL : cél, 1 - Rotate Left. Balra tol, majd a felső bit az alsó bitbe kerül.
    ROR : cél, 1 - Rotate Right. Jobbra tol, majd az alsó bit a felsőbe kerül.
    RCL : cél, 1 - Rotate with Carry Left. Balra forgat, a felső bit a carry-be kerül, a carry előző értéke pedig az alsó bitbe.
    RCR : cél, 1 - Rotate with Carry Right. Jobrra forget, az alsó bit a carry-be kerül, a carry előző értéke pedig a felső bitbe.


pl használatra

   H      L
[  8  ][  8  ] * 2
  RCL    SHL        //RCL beteszi a carry-t alulra, amit a SHL kitolt felülről. pog

Egyéb utasítások
    NOP - No Operation, megállítja a programot.
    CLI - Clear Interrupt
    STI - Set Interrupt
    CLD - Clear D flag
    STD - Set D flag
    HLT - Halt, megáll a processzor, az Interrupt ezt megtudja szakítanibe.
    AAM - (ASCII adjust for Multiplication) Bináris korrekcióhoz kell.
    CBW - Convert Byte to Word
    CWD - Convert Word to DWord

String kezelő utasítások
    MOVS: cél, forrás - Move String (lehet MOVSB vagy MOVSW ugye word vagy byte)
    CMPS: cél, forrás - Compare Strings. Kivonás alapján hasonlítja össze de igazából kit érdekel. Itt is van B meg W.
    STOS: cél, forrás - Store String.  Itt is van B meg W. Betesz az AL/AX-ből az ES:[DI]-be.
    LODS: cél, forrás - Load String. Itt is van B meg W. Kivesz a DS:[SI]-ből AL/AX-be
    SCAS: cél, forrás - Scan And Sling. Itt is van B meg W. Összehasonlítja az AL/AX-et ES:[DI]-vel.

    REP - Repeat, REPE = Repeat Equal, REPNE = Repeat Not Equal, REPNZ = Repeat Not Zero, A REP az egy prefix.

    MOVS pl:
        MOVS ES:[DI], DS[SI] <- ES:[DI]-be beleteszi a DS[SI]-t, a DI-be a DI +- 1 vagy 2-t (byte vagy word), SI-be az SI +- 1 vagy 2-t
                                + ha a D flag = 0, - ha a D flag = 1


String másoló program           Elso LABEL BYTE [ 37 ]     Masod LABEL BYTE

MOV SI, OFFSET Elso
MOV DI, OFFSET Masod
MOV CX, 37

Cik:
    MOV AL, [SI]
    MOV [DI], AL
    INC SI
    INC DI
    LOOP Cik

    Az egész ciklust helyettesíteni lehet egy [REP MOVSB]-vel



Programsorok felépítése

[ label ]parancs/utasítás    paraméter/operandus      ;komment

Megszakítás címek:

    10H - Video
    16H - Bill
    21H - DOS
    33H - Egér

    Használat pl: INT 16H

Képernyőtörlés:   
    
    MOV AH, 0  <- mód beállítás kódja 0
    MOV AL, 3  <- 80*25 karakteres kép üzemmód, annak kódja 3
    INT 10H    <- video interrupt, végrehajtja amit az AH, AL-ben talál. (azaz 3-as módra beállítás). Igazából egy utasítással is lehet törölni: MOV AX, 3

Direktívák, azaz a fordítónak szóló utasítások:

    DB 6, 0BH, 11B, -8, 'A' - Define Byte
    DW - Define Word
    DD - Define Double Word
    DQ - Define Quad Word
    DT - Define Ten Byte

    pl: szoveg DB 'hello world$' <- a 'szoveg'-el lehet rá hivatkozni. a $ jelzi a string végét, így lehet megakasztani a kiírást pl.

Képernyőre kiírás:

    MOV DX, OFFSET szoveg <- a 'szoveg' amit előbb definiáltam.
    MOV AH, 9 <- 9es kód a képernyőre írás, a DX-ről ír ki.
    INT 21H

    Kiírásnál kódok: 13 - kocsi vissza, 10 - soremelés
    
    szoveg  DB 'hello world$'13,10
            DB 'wazzap$'

Karakter beolvasás:

    MOV AH, 1 <- 1 a beolvasás kódja, egyetlen karakterre, beteszi a leütött bill kódját az AL-be, és látni a képen hogy mit nyomsz le.
    INT 21H

    MOV AH, 8 <- ugyanaz mint az 1, csak nem jelenik meg a karakter a képernyőn
    INT 21H

Egér funkciók

    MOV AX, 1 <- az 1 az egér kurzor mutatás, a 2 az elrejtés
    INT 33H

    MOV AX, 3 <- Egér jelenlegi állapotának bekérése: hol van és a gombok állapota., a helyet amit visszaad, el kell osztani 8al.
    INT 33H
                BX-ben tárolja a gombok állapotát, CX-ben a pozíció sorát, DX-ben a pozíció oszlopát